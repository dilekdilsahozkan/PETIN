plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def versionCodeDef = (int) (((new Date()).getTime()) / 100000)
def versionNameDef = System.getenv("VERSION_NAME") && System.getenv("VERSION_NAME").length() > 0 ? System.getenv("VERSION_NAME").toString() : "0.0.0"

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.moralabs.petin"
        minSdk 23
        targetSdk 32
        versionCode versionCodeDef
        versionName versionNameDef
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../cert/keystore.dev")
            storePassword "Pet1nPet1n"
            keyAlias "moralabs"
            keyPassword "Pet1nPet1n"
        }
        alpha {
            storeFile file("../cert/keystore.dev")
            storePassword "Pet1nPet1n"
            keyAlias "moralabs"
            keyPassword "Pet1nPet1n"
        }
        release {
            storeFile file("../cert/keystore")
            storePassword "Pet1nPet1n"
            keyAlias "moralabs"
            keyPassword "Pet1nPet1n"
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            dimension = "default"
            applicationIdSuffix = ".dev"
            versionName = versionNameDef + "-dev"
        }
        uat {
            dimension = "default"
            versionName = versionNameDef + "-uat"
        }
        prod {
            dimension = "default"
        }
    }

    android.variantFilter { variant ->
        variant.getFlavors().each { flavor ->
            if ((variant.buildType.name == 'release' &&
                    (flavor.name == 'dev')) ||
                    (variant.buildType.name == 'debug' &&
                            (flavor.name == 'uat' || flavor.name == 'prod')) ||
                    (variant.buildType.name == 'alpha' &&
                            (flavor.name == 'uat' || flavor.name == 'prod'))) {
                variant.setIgnore(true)
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.alpha
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "PET_BASEURL", "\"https://server-test-be-petinder.azurewebsites.net/\"")
            buildConfigField("String", "VERSION_NAME", "\"" + versionNameDef + "\"")
            buildConfigField("int", "VERSION_CODE", versionCodeDef.toString())
        }
        alpha {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.alpha
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "PET_BASEURL", "\"https://server-test-be-petinder.azurewebsites.net/\"")
            buildConfigField("String", "VERSION_NAME", "\"" + versionNameDef + "\"")
            buildConfigField("int", "VERSION_CODE", versionCodeDef.toString())
            matchingFallbacks = ['debug']
        }
        release {
            debuggable false
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "PET_BASEURL", "\"https://server-prod-be-petin.azurewebsites.net/\"")
            buildConfigField("String", "VERSION_NAME", "\"" + versionNameDef + "\"")
            buildConfigField("int", "VERSION_CODE", versionCodeDef.toString())
        }
        getByName("release") {
            minifyEnabled = false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

    // Test Gradle
    testImplementation 'junit:junit:4.13.2'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.daimajia.swipelayout:library:1.2.0@aar"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "com.google.android.material:material:1.2.0-alpha05"
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.maps.android:android-maps-utils:2.3.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_logging_version"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.39.1"
    kapt "com.google.dagger:hilt-compiler:2.39.1"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha01'

    /* Viewmodel */
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodel_version"
    implementation "androidx.fragment:fragment-ktx:1.4.1"

    //Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"

    //Lottie
    implementation "com.airbnb.android:lottie:$lottie_version"

    //Matereial Design
    implementation "com.google.android.material:material:1.3.0-alpha04"

    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // Circular ImageView
    implementation "de.hdodenhof:circleimageview:3.1.0"
    //Palette
    implementation 'androidx.palette:palette-ktx:1.0.0'

    //noinspection GradleCompatible
    implementation 'com.android.support:design:28.0.0'

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"

    // Secure Key
    implementation "androidx.security:security-crypto:1.0.0-rc02"

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:30.4.1')

    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    implementation 'com.google.firebase:firebase-messaging'

    // Dots
    implementation "com.tbuonomo:dotsindicator:4.3"

    //Facebook SDK
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'
}